Index: app/src/main/java/com/example/searsnotes/AddNoteActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/searsnotes/AddNoteActivity.java	(revision 9f161a1885a81a2394df220e3590ddd789c0d779)
+++ app/src/main/java/com/example/searsnotes/AddNoteActivity.java	(date 1564558159741)
@@ -1,16 +1,23 @@
 package com.example.searsnotes;
 
 import androidx.annotation.Nullable;
+import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.content.ContextCompat;
 import androidx.databinding.DataBindingUtil;
 import androidx.lifecycle.ViewModelProviders;
 
+import android.Manifest;
+import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.net.Uri;
 import android.os.Bundle;
 import android.provider.MediaStore;
+import android.provider.Settings;
 import android.view.View;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.example.searsnotes.Constants.IntentRequestCodes;
 import com.example.searsnotes.Utilities.ImportantMethods;
@@ -19,73 +26,142 @@
 import com.example.searsnotes.databinding.ActivityAddNoteBinding;
 import com.example.searsnotes.dependencyInjection.ViewModelProviderFactory;
 import com.example.searsnotes.model.NotesVo;
+import com.karumi.dexter.Dexter;
+import com.karumi.dexter.MultiplePermissionsReport;
+import com.karumi.dexter.PermissionToken;
+import com.karumi.dexter.listener.DexterError;
+import com.karumi.dexter.listener.PermissionRequest;
+import com.karumi.dexter.listener.PermissionRequestErrorListener;
+import com.karumi.dexter.listener.multi.MultiplePermissionsListener;
+
+import java.util.List;
 
 import javax.inject.Inject;
 
 public class AddNoteActivity extends AppCompatActivity {
 
     private String imageUri;
-    private TextView picImage,captureImage;
+    private TextView picImage, captureImage;
     private ActivityAddNoteBinding addNoteBinding;
-    private NotesVo note= new NotesVo();
+    private NotesVo note = new NotesVo();
     @Inject
     ViewModelProviderFactory providerFactory;
     private AddNoteActivityViewModel viewModel;
+    boolean flag = false;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        addNoteBinding = DataBindingUtil.setContentView(this,R.layout.activity_add_note);
+        addNoteBinding = DataBindingUtil.setContentView(this, R.layout.activity_add_note);
         imageUri = null;
-        picImage  = findViewById(R.id.pic_note_image);
-        captureImage  = findViewById(R.id.capture_note_image);
-        addNoteBinding.noteTitle.setCustomSelectionActionModeCallback(new CustomCallBack(addNoteBinding.noteTitle,this));
-        addNoteBinding.noteText.setCustomSelectionActionModeCallback(new CustomCallBack(addNoteBinding.noteText,this));
+        picImage = findViewById(R.id.pic_note_image);
+        captureImage = findViewById(R.id.capture_note_image);
+        addNoteBinding.noteTitle.setCustomSelectionActionModeCallback(new CustomCallBack(addNoteBinding.noteTitle, this));
+        addNoteBinding.noteText.setCustomSelectionActionModeCallback(new CustomCallBack(addNoteBinding.noteText, this));
         addNoteBinding.setNoteObject(note);
-        viewModel = ViewModelProviders.of(this,providerFactory).get(AddNoteActivityViewModel.class);
+        viewModel = ViewModelProviders.of(this, providerFactory).get(AddNoteActivityViewModel.class);
     }
 
 
     public void saveBtnClicked(View view) {
-        Bundle noteDataBundle = viewModel.makeBundle(addNoteBinding.noteTitle,addNoteBinding.noteText,imageUri,ImportantMethods.gettime());
-        Intent resultIntent = new Intent().putExtra("note_data",noteDataBundle);
-        setResult(RESULT_OK,resultIntent);
+        Bundle noteDataBundle = viewModel.makeBundle(addNoteBinding.noteTitle, addNoteBinding.noteText, imageUri, ImportantMethods.gettime());
+        Intent resultIntent = new Intent().putExtra("note_data", noteDataBundle);
+        setResult(RESULT_OK, resultIntent);
         finish();
     }
 
 
-    public void discardBtnClicked(View view) { finish();}
+    public void discardBtnClicked(View view) {
+        finish();
+    }
 
     public void picImageClicked(View view) {
-        StartActivity startActivity = new StartActivity();
-        boolean flag = startActivity.checkRuntimePermission(this);
-        if(flag){
+        requestMultiplePermissions();
+        if (flag) {
             Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
             intent.setType("image/*");
-            startActivityForResult(Intent.createChooser(intent,"Pic an Image"), IntentRequestCodes.PICK_PICTURE_ACTIVITY_REQUEST);
+            startActivityForResult(Intent.createChooser(intent, "Pic an Image"), IntentRequestCodes.PICK_PICTURE_ACTIVITY_REQUEST);
         }
+
     }
+
 
     public void captureImageClicked(View view) {
-        StartActivity startActivity = new StartActivity();
-       boolean flag = startActivity.checkRuntimePermission(this);
-       if(flag){
-           Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-           if(intent.resolveActivity(getPackageManager())!=null){
-               startActivityForResult(intent, IntentRequestCodes.CAPTURE_PICTURE_ACTIVITY_REQUEST);
-           }
-       }
-    }
+        requestMultiplePermissions();
+        if (flag) {
+            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+            if (intent.resolveActivity(getPackageManager()) != null) {
+                startActivityForResult(intent, IntentRequestCodes.CAPTURE_PICTURE_ACTIVITY_REQUEST);
+            }
+        }
 
+    }
 
     @Override
     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
 
-        imageUri = viewModel.onActivityResult(requestCode,resultCode,data);
-        if(imageUri!=null){addNoteBinding.noteImage.setImageURI(Uri.parse(imageUri));}
+        imageUri = viewModel.onActivityResult(requestCode, resultCode, data);
+        if (imageUri != null) {
+            addNoteBinding.noteImage.setImageURI(Uri.parse(imageUri));
+        }
+
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if ((ContextCompat.checkSelfPermission(AddNoteActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)
+                && (ContextCompat.checkSelfPermission(AddNoteActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)
+                && (ContextCompat.checkSelfPermission(AddNoteActivity.this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED)) {
+            flag = true;
+        }
+    }
 
-    }
+    private void requestMultiplePermissions() {
+        Dexter.withActivity(this)
+                .withPermissions(
+                        Manifest.permission.READ_EXTERNAL_STORAGE,
+                        Manifest.permission.WRITE_EXTERNAL_STORAGE,
+                        Manifest.permission.CAMERA)
+                .withListener(new MultiplePermissionsListener() {
+                    @Override
+                    public void onPermissionsChecked(MultiplePermissionsReport report) {
+                        if (report.areAllPermissionsGranted()) {
+                            flag = true;
+                        }
+                        if (report.isAnyPermissionPermanentlyDenied()) {
+                            flag = false;
+                            AlertDialog.Builder builder = new AlertDialog.Builder(AddNoteActivity.this);
+                            builder.setTitle("Permission Denied")
+                                    .setMessage(" Some Permissions are permanently denied. you need to go to setting to allow the permissions.")
+                                    .setNegativeButton("Cancel", null)
+                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
+                                        @Override
+                                        public void onClick(DialogInterface dialog, int which) {
+                                            Intent intent = new Intent();
+                                            intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
+                                            intent.setData(Uri.fromParts("package", getPackageName(), null));
+                                            startActivity(intent);
+                                        }
+                                    })
+                                    .show();
+                        }
+                    }
 
+                    @Override
+                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
+                        token.continuePermissionRequest();
+                    }
+                }).
+                withErrorListener(new PermissionRequestErrorListener() {
+                    @Override
+                    public void onError(DexterError error) {
+                        Toast.makeText(getApplicationContext(), "Some Error! ", Toast.LENGTH_SHORT).show();
+                    }
+                })
+                .onSameThread()
+                .check();
 
+    }
 }
Index: app/src/main/java/com/example/searsnotes/StartActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/searsnotes/StartActivity.java	(revision 9f161a1885a81a2394df220e3590ddd789c0d779)
+++ app/src/main/java/com/example/searsnotes/StartActivity.java	(date 1564557973432)
@@ -38,37 +38,5 @@
         },800);
     }
 
-    public boolean checkRuntimePermission(Context context) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)
-        {
-            if(ActivityCompat.checkSelfPermission((Activity)context,Manifest.permission.CAMERA)== PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission((Activity)context,Manifest.permission.READ_EXTERNAL_STORAGE)==PackageManager.PERMISSION_GRANTED &&
-                    ActivityCompat.checkSelfPermission((Activity)context,Manifest.permission.WRITE_EXTERNAL_STORAGE)==PackageManager.PERMISSION_GRANTED)
-            {
-                flag=true;
-            }
-            else
-            {
-                ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.CAMERA,Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE},1);
-            }
-        }
-        return flag;
-    }
-
-    @Override
-    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
-        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
-        if(requestCode==1)
-        {
-            if(grantResults[0]==PackageManager.PERMISSION_GRANTED && grantResults[1]==PackageManager.PERMISSION_GRANTED &&
-                    grantResults[2]==PackageManager.PERMISSION_GRANTED)
-            {
-                Toast.makeText(getApplicationContext(),"Permission granted",Toast.LENGTH_SHORT).show();
-            }
-            else
-            {
-                Toast.makeText(getApplicationContext(),"Permission denied",Toast.LENGTH_SHORT).show();
-            }
-        }
-    }
 
 }
Index: app/src/main/java/com/example/searsnotes/EditNoteActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/searsnotes/EditNoteActivity.java	(revision 9f161a1885a81a2394df220e3590ddd789c0d779)
+++ app/src/main/java/com/example/searsnotes/EditNoteActivity.java	(date 1564558379864)
@@ -2,20 +2,27 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.content.ContextCompat;
 import androidx.databinding.DataBindingUtil;
 import androidx.lifecycle.LiveData;
 import androidx.lifecycle.Observer;
 import androidx.lifecycle.ViewModelProviders;
 
+import android.Manifest;
+import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
 import android.provider.MediaStore;
+import android.provider.Settings;
 import android.view.View;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.example.searsnotes.Constants.IntentRequestCodes;
 import com.example.searsnotes.Utilities.CustomCallBack;
@@ -24,8 +31,16 @@
 import com.example.searsnotes.model.NotesVo;
 import com.example.searsnotes.Utilities.ImportantMethods;
 import com.example.searsnotes.ViewModels.EditNoteActivityViewModel;
+import com.karumi.dexter.Dexter;
+import com.karumi.dexter.MultiplePermissionsReport;
+import com.karumi.dexter.PermissionToken;
+import com.karumi.dexter.listener.DexterError;
+import com.karumi.dexter.listener.PermissionRequest;
+import com.karumi.dexter.listener.PermissionRequestErrorListener;
+import com.karumi.dexter.listener.multi.MultiplePermissionsListener;
 
 import java.io.IOException;
+import java.util.List;
 
 import javax.inject.Inject;
 
@@ -38,6 +53,7 @@
     private EditNoteActivityViewModel viewModel;
     private LiveData<NotesVo> note;
     private ActivityEditNoteBinding editNoteBinding;
+    private boolean flag=false;
 
 
     @Override
@@ -69,25 +85,25 @@
     }
 
     public void picImageClicked(View view) {
-        StartActivity startActivity = new StartActivity();
-        boolean flag = startActivity.checkRuntimePermission(this);
-        if(flag){
+        requestMultiplePermissions();
+        if (flag) {
             Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
             intent.setType("image/*");
-            startActivityForResult(Intent.createChooser(intent,"Pic an Image"), IntentRequestCodes.PICK_PICTURE_ACTIVITY_REQUEST);
+            startActivityForResult(Intent.createChooser(intent, "Pic an Image"), IntentRequestCodes.PICK_PICTURE_ACTIVITY_REQUEST);
         }
+
     }
 
     public void captureImageClicked(View view) {
-        StartActivity startActivity = new StartActivity();
-        boolean flag = startActivity.checkRuntimePermission(this);
-        if(flag){
+        requestMultiplePermissions();
+        if (flag) {
             Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-            if(intent.resolveActivity(getPackageManager())!=null){
+            if (intent.resolveActivity(getPackageManager()) != null) {
                 startActivityForResult(intent, IntentRequestCodes.CAPTURE_PICTURE_ACTIVITY_REQUEST);
             }
         }
     }
+
     public void discardBtnClicked(View view) { finish();}
 
 
@@ -98,6 +114,62 @@
         editNoteBinding.noteImage.setImageURI(Uri.parse(imageUri));
     }
 
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if ((ContextCompat.checkSelfPermission(EditNoteActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)
+                && (ContextCompat.checkSelfPermission(EditNoteActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)
+                && (ContextCompat.checkSelfPermission(EditNoteActivity.this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED)) {
+            flag = true;
+        }
+    }
+
+    private void requestMultiplePermissions() {
+        Dexter.withActivity(this)
+                .withPermissions(
+                        Manifest.permission.READ_EXTERNAL_STORAGE,
+                        Manifest.permission.WRITE_EXTERNAL_STORAGE,
+                        Manifest.permission.CAMERA)
+                .withListener(new MultiplePermissionsListener() {
+                    @Override
+                    public void onPermissionsChecked(MultiplePermissionsReport report) {
+                        if (report.areAllPermissionsGranted()) {
+                            flag = true;
+                        }
+                        if (report.isAnyPermissionPermanentlyDenied()) {
+                            flag = false;
+                            AlertDialog.Builder builder = new AlertDialog.Builder(EditNoteActivity.this);
+                            builder.setTitle("Permission Denied")
+                                    .setMessage(" Some Permissions are permanently denied. you need to go to setting to allow the permissions.")
+                                    .setNegativeButton("Cancel", null)
+                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
+                                        @Override
+                                        public void onClick(DialogInterface dialog, int which) {
+                                            Intent intent = new Intent();
+                                            intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
+                                            intent.setData(Uri.fromParts("package", getPackageName(), null));
+                                            startActivity(intent);
+                                        }
+                                    })
+                                    .show();
+                        }
+                    }
+
+                    @Override
+                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
+                        token.continuePermissionRequest();
+                    }
+                }).
+                withErrorListener(new PermissionRequestErrorListener() {
+                    @Override
+                    public void onError(DexterError error) {
+                        Toast.makeText(getApplicationContext(), "Some Error! ", Toast.LENGTH_SHORT).show();
+                    }
+                })
+                .onSameThread()
+                .check();
+
+    }
 
 
 }
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 9f161a1885a81a2394df220e3590ddd789c0d779)
+++ app/build.gradle	(date 1564556705397)
@@ -52,7 +52,7 @@
     implementation("com.squareup.okhttp3:logging-interceptor:4.0.0")
     implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
     implementation 'de.hdodenhof:circleimageview:2.2.0'
-
+    implementation 'com.karumi:dexter:5.0.0'
 
     implementation 'com.google.dagger:dagger:2.24'
     annotationProcessor 'com.google.dagger:dagger-compiler:2.24'
